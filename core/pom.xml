<project xmlns="http://maven.apache.org/POM/4.0.0" 
	 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
			     http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  
  <properties>
    <!-- Override this by activating the 'tester' profile -->
    <skipTests>true</skipTests>
  </properties>
  
  <!--
      We have native libraries (JNI/C) bundled into our artifact but,
      due to the composition of our Makefiles (see e.g.
      src/main/native/Linux/Makefile) and the 'native-lib-loader'
      artifact we use to load native stuff, we appear to be pure Java.
      Cool or what!
  -->

  <parent>
    <groupId>edu.uw.apl.commons</groupId>
    <artifactId>tsk4j-parent</artifactId>
    <version>413.3.11</version>
  </parent>
  
  <groupId>edu.uw.apl.commons</groupId>
  <artifactId>tsk4j-core</artifactId>
  <version>413.3.11</version>
  <packaging>jar</packaging>
  <name>
    TSK4J: Core - JNI Bindings to Sleuthkit C library
  </name>

  <repositories>
    <!-- 
    To locate our dependent artifacts which are not (yet) available at
    Maven Central, we bundle them into this project-local repo
    -->
    <repository>
      <id>tsk4j.local</id>
      <name>tsk4j</name>
      <url>file:${project.basedir}/../.repository</url>
      <releases>
	<updatePolicy>always</updatePolicy>
      </releases>
    </repository>
  </repositories>


  <dependencies>
    <!--  Switching to Jitpack, which uses the GitHub repo name
    <dependency>
      <groupId>edu.uw.apl.commons</groupId>
      <artifactId>native-lib-loader</artifactId>
      <version>2.1.0</version>
    </dependency>
    -->
	<dependency>
		<groupId>com.github.uw-dims</groupId>
		<artifactId>java-native-loader</artifactId>
		<version>2.1.0</version>
	</dependency>
    <dependency>
      <groupId>commons-codec</groupId>
      <artifactId>commons-codec</artifactId>
      <version>1.5</version>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.13.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
      <version>1.2.17</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <profiles>
    <!-- Canonicalise all 32-bit arch names to 'x86' -->
    <profile>
      <id>x86</id>
      <activation>
	<os>
	  <arch>x86</arch>
	</os>
      </activation>
      <properties>
	<arch>x86</arch>
      </properties>
    </profile>
    <profile>
      <id>i386</id>
      <activation>
	<os>
	  <arch>i386</arch>
	</os>
      </activation>
      <properties>
	<arch>x86</arch>
      </properties>
    </profile>

    <!-- Canonicalise all 64-bit arch names to 'x86_64' -->
    <profile>
      <id>x86_64</id>
      <activation>
	<os>
	  <arch>x86_64</arch>
	</os>
      </activation>
      <properties>
	<arch>x86_64</arch>
      </properties>
    </profile>
    <profile>
      <id>amd64</id>
      <activation>
	<os>
	  <arch>amd64</arch>
	</os>
      </activation>
      <properties>
	<arch>x86_64</arch>
      </properties>
    </profile>
    <!--
	The previous profile sets, to canonicalise arch names to that string
	understood by java-native-loader, would be needed in ANY project
	that uses java-native-loader, so might go in settings.xml ??
    -->

    <profile>
      <id>tester</id>
      <properties>
	<skipTests>false</skipTests>
      </properties>
    </profile>
    <profile>
      <id>windows</id>
      <activation>
	<os>
	  <family>Windows</family>
	</os>
      </activation>
      <properties>
	<make>make</make>
	<os.name>Windows</os.name>
      </properties>
    </profile>
    <profile>
      <id>linux</id>
      <activation>
	<os>
	  <family>Linux</family>
	</os>
      </activation>
      <properties>
	<make>make</make>
	<os.name>Linux</os.name>
      </properties>
    </profile>
    <profile>
      <id>macos</id>
      <activation>
	<os>
	  <family>Mac</family>
	</os>
      </activation>
      <properties>
	<make>make</make>
	<os.name>Mac OS X</os.name>
      </properties>
    </profile>
    
    <!--
	We only try to build/package the native (jni) code if we are a
	'power' user: mvn -Pnative.  Once done, we then 'git add' the
	resultant .so/.dll/.dylib sitting under src/main/resources.  Then
	'regular' users see this lib as just a resource to bundle into
	the runtime jar.
    -->
      <profile>
	<id>native</id>
	<build>
	  <pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.12.1</version>
				<configuration>
					<compilerArgs>
						<arg>-h</arg>
						<arg>${project.build.directory}/native/javah</arg>
					</compilerArgs>
				</configuration>
			</plugin>
		</plugins>
	  </pluginManagement>
	  <plugins>
	    <plugin>
	      <groupId>org.codehaus.mojo</groupId>
	      <artifactId>exec-maven-plugin</artifactId>
	      <version>1.1</version>
	      <executions>
		<execution>
		  <id>build.native</id>
		  <phase>compile</phase>
		  <goals>
		    <goal>exec</goal>
		  </goals>
		  <configuration>
		    <workingDirectory>
		      src/main/native/${os.name}/${arch}
		    </workingDirectory>
		    <executable>${make}</executable>
		    <commandlineArgs>install</commandlineArgs>
		    <environmentVariables>
		      <ARCH>${arch}</ARCH>
		      <!-- LOOK: Is this valid, using .. ? -->
		      <JDK_HOME>${java.home}</JDK_HOME>
		      <PREFIX>edu.uw.apl.commons.tsk4j</PREFIX>
		      <LIBNAME>tsk4j-core</LIBNAME>
		    </environmentVariables>
		  </configuration>
		</execution>
		
		<execution>
		  <id>clean.native</id>
		  <phase>clean</phase>
		  <goals>
		    <goal>exec</goal>
		  </goals>
		  <configuration>
		    <workingDirectory>
		      src/main/native/${os.name}/${arch}
		    </workingDirectory>
		    <executable>${make}</executable>
		    <commandlineArgs>clean</commandlineArgs>
		    <environmentVariables>
		      <ARCH>${arch}</ARCH>
		      <!-- LOOK: Is this valid, using .. ? -->
		      <JDK_HOME>${java.home}</JDK_HOME>
		      <PREFIX>edu.uw.apl.commons.tsk4j</PREFIX>
		      <LIBNAME>tsk4j-core</LIBNAME>
		    </environmentVariables>
		  </configuration>
		</execution>
	      </executions>
	    </plugin>
	  </plugins>
	</build>
      </profile>
    </profiles>

    <build>
      <defaultGoal>compile</defaultGoal>
      <plugins>

	<plugin>
	  <artifactId>maven-surefire-plugin</artifactId>
	  <configuration>
	    <skipTests>${skipTests}</skipTests>
	  </configuration>
	</plugin>

	<plugin>
	  <artifactId>maven-jar-plugin</artifactId>
	  <configuration>
	    <archive>
	      <manifest>
		<addDefaultImplementationEntries>
		  true
		</addDefaultImplementationEntries>
		<addDefaultSpecificationEntries>
		  true
		</addDefaultSpecificationEntries>
	      </manifest>
	    </archive>
	  </configuration>
	</plugin>
      </plugins>
    </build>

</project>
